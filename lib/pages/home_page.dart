import 'package:executive_planner/backend/event_list.dart';
import 'package:executive_planner/backend/jason.dart';
import 'package:executive_planner/backend/master_list.dart';
import 'package:executive_planner/pages/calendar.dart';
import 'package:executive_planner/pages/event_change_form.dart';
import 'package:executive_planner/widgets/bottom_nav_bar.dart';
import 'package:executive_planner/widgets/event_list_display.dart';
import 'package:executive_planner/widgets/search.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

// TODO: Automatically hide unwanted events (subevents, trash, completed?)
/// The starting page of the application.
///
/// Generated by the [_search] function in [ExecutiveHomePage] and by [main].
/// Only displays events in [events].
class ExecutiveHomePage extends StatefulWidget {
  const ExecutiveHomePage({
    Key? key,
    required this.title,
    required this.events,
    this.isRoot,
  }) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  /// The title text, placed in the center of the appbar.
  final String title;

  /// Holds the events considered by this particular HomePage.
  /// Necessary to consider and selectively show searches.
  final EventList events;

  final ExecutiveHomePage? isRoot;

  /// Adds event to both current and masterList.
  void addEvent(Event e) {
    masterList.add(e);
    saveMaster();
    events.add(e);
  }

  /// Removes event from both current and masterList.
  void removeEvent(Event e) {
    masterList.remove(e);
    saveMaster();
    events.remove(e);
  }

  @override
  State<ExecutiveHomePage> createState() => _ExecutiveHomePageState();
}

// TODO: EventCreationForm should not arbitrarily access widget
class _ExecutiveHomePageState extends State<ExecutiveHomePage> {
  _ExecutiveHomePageState();

  /// Generates a search icon which can be tapped to become a text field.
  Widget _searchIcon() {
    return IconButton(
      onPressed: () {
        _search(context);
      },
      icon: const Icon(Icons.search),
    );
  }

  /// Loads new page when search results are submitted, generating a new
  /// [ExecutiveHomePage].
  Future _goToSearchPage(BuildContext context, EventList events) async {
    await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ExecutiveHomePage(
          title: 'Search results',
          events: events,
          isRoot: widget.isRoot ?? widget,
        ),
      ),
    );
    _update();
  }

  /// Generates an [AdvancedSearch] as an [OverlayEntry].
  ///
  /// Search results are all pushed to new [ExecutiveHomePage] screen.
  Future _search(BuildContext context) async {
    if (Overlay.of(context) != null) {
      final OverlayState overlayState = Overlay.of(context)!;
      OverlayEntry overlayEntry;
      // Flutter doesn't allow you to reference overlayEntry before it is created,
      // even though the buttons in search need to reference it.
      Function removeOverlayEntry = () {};
      overlayEntry = OverlayEntry(
        builder: (context) {
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 30),
            child: Card(
              child: Center(
                child: DecoratedBox(
                  decoration:
                      BoxDecoration(color: Theme.of(context).canvasColor),
                  child: AdvancedSearch(
                    events: widget.isRoot == null ? masterList.toEventList() : widget.events,
                    onSubmit: (EventList e) {
                      _goToSearchPage(context, e);
                      removeOverlayEntry();
                    },
                    onExit: () {
                      removeOverlayEntry();
      },),),),),);},);
      removeOverlayEntry = () {
        overlayEntry.remove();
      };
      overlayState.insert(overlayEntry);
    }
  }

  /// Writes events to file whenever they are modified.
  void _update() {
    setState(() {});
  }

  /// Changes pages to EventChangeForm, allowing editing of events.
  /// If event is uninitialized, this will give an screen for adding a new event.
  /// Otherwise, it will edit a current event.
  Future<Event?> _changeEventList(BuildContext context, {Event? event}) async {
    return Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => EventChangeForm(
          event: event,
          events: widget.events,
        ),
      ),
    );
  }

  Widget drawer() {
    DateTime? pressStart;
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          SizedBox(
            height: 70,
            child: DrawerHeader(
              decoration: BoxDecoration(
                color: Theme.of(context).primaryColorLight,
              ),
              child: Text(
                'Executive Planner',
                style: Theme.of(context).textTheme.headline5,
              ),),),
          OutlinedButton(
            style: OutlinedButton.styleFrom(fixedSize: const Size(10, 50)),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => CalendarView(
                    events: widget.events,
                  ),),);},
            child: const Text('Calendar'),
          ),
          const Divider(),
          RadioListTile<Comparator<Event>>(
            title: const Text('Sort by name'),
            value: Event.nameCompare,
            groupValue: widget.events.sortFunc,
            onChanged: (Comparator<Event>? value) {
              setState(() {
                widget.events.sortFunc = value!;
                widget.events.sort();
                setState(() {});
              });},),
          RadioListTile<Comparator<Event>>(
            title: const Text('Sort by date'),
            value: Event.dateCompare,
            groupValue: widget.events.sortFunc,
            onChanged: (Comparator<Event>? value) {
              setState(() {
                widget.events.sortFunc = value!;
                widget.events.sort();
                setState(() {});
              });},),
          RadioListTile<Comparator<Event>>(
            title: const Text('Sort by priority'),
            value: Event.priorityCompare,
            groupValue: widget.events.sortFunc,
            onChanged: (Comparator<Event>? value) {
              setState(() {
                widget.events.sortFunc = value!;
                widget.events.sort();
                setState(() {});
              });},),
          const Divider(),
          TextButton(
            onPressed: () {
              Clipboard.setData(ClipboardData(text: Set<Event>.from(widget.events.list).toJason()));
              setState(() {});
            },
            child: const Text('Export to clipboard'),
          ),
          GestureDetector(
            onTapDown: (TapDownDetails? details) {pressStart = DateTime.now();},
            onTapUp: (TapUpDetails? details) {
              if(pressStart != null
                  && DateTime.now().isAfter(pressStart!.add(const Duration(seconds: 3)))
                  && DateTime.now().isBefore(pressStart!.add(const Duration(seconds: 10)))
              ) {
                Clipboard.getData('text/plain').then((ClipboardData? value) {
                  if(value != null && value.text != null && value.text != '') {
                    Navigator.popUntil(context, ModalRoute.withName('/'));
                    loadMaster(value.text!);
                    final ExecutiveHomePage root = widget.isRoot ?? widget;
                    root.events.clear();
                    root.events.union(masterList.toEventList()).searchTags('Completed', appears: false);
                  }
                });
                setState(() {});
              }
            },
            // TODO: Make it apparent that this button works already
            child: const TextButton(onPressed: null, child: Text('Import from clipboard'),),
          ),
    ],),);
  }

  /// Our wonderful "Title"
  Widget definitelyATitle() {
    final List<Widget> widgets = <Widget>[];
    if(widget.isRoot != null) {
      widgets.add(
        IconButton(
          onPressed: () {
            Navigator.pop(context);
          },
          icon: const Icon(Icons.arrow_back),
        ),
      );
    }
    widgets.add(Text(widget.title));
    widgets.add(
      IconButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => CalendarView(
                events: widget.events,
              ),),);},
        icon: const Icon(Icons.calendar_today),
    ),);
    return Row(
      children: widgets,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        actions: [
          _searchIcon(),
        ],
        centerTitle: false,
        title: definitelyATitle(),
      ),
      // Hamburger :)
      drawer: drawer(),
      body: EventListDisplay(
        events: widget.events,
        onLongPress: (Event e) {
          _changeEventList(context, event: e).then((Event? copy) {
            if(copy == null) {
              widget.removeEvent(e);
            } else if (e == copy) {
            } else {
              e.copy(copy);
              widget.events.sort();
            }
            setState(() {});
          });
        },
        onDrag: (Event e) {
          e.complete();
          widget.events.remove(e);
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _changeEventList(context).then((Event? e) {
            if(e != null) {
              widget.addEvent(e);
              setState(() {});
            }
          });
        },
        tooltip: 'Add Event',
        child: const Icon(Icons.add),
      ),
      bottomNavigationBar: NavBarDisplay(
        events: widget.events,
        selectedIndex: 0,
    ),);
  }
}
